<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-2.5.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--引入redis配置文件 -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:redis.properties</value>
            </list>
        </property>
    </bean>
    <!--连接池 属性定义-->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <!--<property name="maxActive" value="32"></property>-->
        <property name="maxIdle" value="6"></property>
        <!--<property name="maxWait" value="15000"></property>-->
        <property name="minEvictableIdleTimeMillis" value="300000"></property>
        <property name="numTestsPerEvictionRun" value="3"></property>
        <property name="timeBetweenEvictionRunsMillis" value="60000"></property>
        <!--<property name="whenExhaustedAction" value="1"></property>-->
    </bean>

    <!--定义连接工厂-->
    <bean id="jedisConnFactory"
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
          p:usePool="${usePool}" p:port="${port}" p:hostName="${ip}" p:database="${database}" p:poolConfig-ref="jedisPoolConfig"/>

    <!-- redis 模板方法 -->
    <bean id="redisTemplate"
          class="org.springframework.data.redis.core.RedisTemplate"
          p:connectionFactory-ref="jedisConnFactory" p:enableTransactionSupport="true">
        <!--添加这些序列化器 防止使用spring redis操作redis后 redis的key是乱码 的情况-->
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="hashValueSerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
    </bean>

    <!--定义redis 容器-->

    <bean id="messageLisenner" class="com.xiaohao.listenner.MyMessageDelegateListener"/>
    <!--<bean id="topic" class="org.springframework.data.redis.listener.ChannelTopic">-->
    <!--<constructor-arg name="name" value="news.*"/>-->
    <!--</bean>-->

    <!--定义redis容器-->
    <bean id="redisContainer" class="org.springframework.data.redis.listener.RedisMessageListenerContainer"
          p:connectionFactory-ref="jedisConnFactory">
       <!--定义reids容器的监听器-->
        <property name="messageListeners">
            <map>
                <entry key-ref="messageLisenner">
                    <!--定义发送的频道-->
                    <bean class="org.springframework.data.redis.listener.ChannelTopic">
                        <!--以news.开头的所有的频道都能接收到消息-->
                        <constructor-arg value="news.*"/>
                    </bean>
                </entry>
            </map>
        </property>
    </bean>

    <!--定义扫描组件的包 这样 就能直接从springApplicationContext get Bean了-->
    <context:component-scan base-package="com.xiaohao"/>

</beans>